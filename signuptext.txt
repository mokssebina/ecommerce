                        <FormInput
                          label="Your name"
                          name="displayName"
                          type="text"
                          formOptions={signupSchema.fields.displayName}
                          errors={errors.displayName}
                          />

                        {/*type === "seller" &&
                          <FormInput
                          label="Company name"
                          name="displayName"
                          type="text"
                          formOptions={signupSchema.fields.companyName}
                          errors={errors.displayName}
                          />*/}

                          <FormInput
                          label="Email"
                          name="email"
                          type="email"
                          formOptions={signupSchema.fields.email}
                          errors={errors.email}
                          />

                          <FormInput
                          label="Password"
                          name="password"
                          type="password"
                          formOptions={signupSchema.fields.password}
                          errors={errors.password}
                          />

                          <FormInput
                          label="Confirm Password"
                          name="confirm_password"
                          type="password"
                          formOptions={signupSchema.fields.confirm_password}
                          errors={errors.confirm_password}
                          />
                          
                        <SubmitButton buttonText={"Sign up"} />



 <FormInput
                          label="Company name"
                          name="sellerCompanyName"
                          type="text"
                          formOptions={sellerSignupSchema.fields.sellerCompanyName}
                          errors={errors.displayName}
                          />

                          <FormInput
                          label="Email"
                          name="sellerEmail"
                          type="email"
                          formOptions={sellerSignupSchema.fields.sellerEmail}
                          errors={errors.email}
                          />

                          <FormInput
                          label="Password"
                          name="sellerPassword"
                          type="password"
                          formOptions={sellerSignupSchema.fields.sellerPassword}
                          errors={errors.password}
                          />

                          <FormInput
                          label="Confirm Password"
                          name="sellerConfirm_password"
                          type="password"
                          formOptions={sellerSignupSchema.fields.sellerConfirm_password}
                          errors={errors.confirm_password}
                          />
                          
                          <SubmitButton buttonText={"Sign up"} />




import React, { useState } from "react";
import { Disclosure } from '@headlessui/react'
import { ChevronUpIcon } from '@heroicons/react/outline'
import { FormProvider, useForm } from "react-hook-form";
import { FormInput } from "../components/form-components/FormInput";
import SubmitButton from "../components/form-components/SubmitButton";
import { useAuth } from "../context/AuthContext";
import { InferType } from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { toast } from "react-hot-toast";
import { signupSchema } from "../validation/signupValidation";
import { sellerSignupSchema} from "../validation/sellerSignupValidation"
import { useRouter } from "next/router";
import { HOME, LOGIN } from "../utils/constant/routesConstants";
import { Tab } from '@headlessui/react'
import { onSnapshot, doc, setDoc, collection, addDoc } from "firebase/firestore";
//import db from '../../firebase'
import { db } from "../config/firebase";


function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}


function Signup() {

  
    const [type, setType] = useState(0)
    const [account, setAccount] = useState(0)
    const [see, setSee] = useState(true)
    const [show, setShow] = useState(true)

    const { signUp, user } = useAuth();
    const router = useRouter();

    console.log("account: ",account)

    const methods = useForm({ mode: "onBlur", resolver: yupResolver(account === 0? signupSchema: sellerSignupSchema) });

    const {
      handleSubmit,
      formState: { errors },
    } = methods;

 
    const onSubmit = async (data) => {

		  const toastId = toast.loading("Signing up...");
      console.log(account === 0? "signup started" : "seller signup started")
    
      try {
        console.log("sign up started")

        console.log("user details: ",data.sellerEmail)

        const createdUserResult = await signUp(account === 0? (data.email, data.password) : (data.sellerEmail, data.sellerPassword));

        await createdUserResult.user.updateProfile({
          displayName: data.displayName
        });

        console.log("user ID: ",createdUserResult.user.uid)

        const collectionRef = doc(db, "users", `${createdUserResult.user.uid}`);

        const payload = {
          name: account === 0? data.displayName: data.sellerCompanyName,
          email: account === 0? data.email: data.sellerEmail,
          displayPicture: '',
          account: account === 0? "customer": "seller",
          userId: createdUserResult.user.uid,
          status: account === 0? null: "pending"
        }
        const docRef = await addDoc(collectionRef, payload);

        console.log("Doc ID")
        console.log("User is created: ",docRef)

        console.log("User is created")
  
        toast.success("Successfully signed up!", { id: toastId });
        router.push(HOME);

      } catch (error) {
        toast.error(error.message, { id: toastId });
        console.log("error: ",error.message)
      }

	};

  return (
    <div className='w-full h-screen bg-white pt-14 overflow-y-hidden md:overflow-y-hidden lg:overflow-y-hidden xl:overflow-y-hidden'>
     <h2 className="px-12 mt-4 mb-6 text-center text-2xl font-semibold text-amazon_blue">Sign Up</h2>
     <main className='grid grid-flow-row-dense md:grid-cols-2 w-11/12 mx-auto bg-white'> 
      <div className=" w-full">
       <div className="sign-up-form container w-full md:w-10/12 lg:w-8/12 px-2 mx-auto mb-6">
         <FormProvider {...methods}>
          <form
           action=""
           className="w-11/12 mx-auto pb-12"
           onSubmit={handleSubmit(onSubmit)}>
            <div className="w-full mb-2 mt-2">
            <Disclosure defaultOpen={show}>
              {({ open }) => (
                <>
                  <Disclosure.Button className="flex w-full justify-between rounded-lg bg-gray-50 px-2 py-2 text-left text-sm font-medium text-gray-800 hover:bg-purple-200 focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75">
                    <div className='w-9/12 items-center justify-between text-xs text-gray-800'>
                     <p>Customer</p> 
                    </div>
                    <ChevronUpIcon
                      className={`ml-2 ${
                        open ? 'rotate-180 transform' : ''
                      } h-5 w-5 text-gray-800`}
                    />
                  </Disclosure.Button>
                  <Disclosure.Panel className="px-1 pt-4 pb-2 text-xs text-gray-500">
                    <FormInput
                     label="Your name"
                     name="displayName"
                     type="text"
                     formOptions={signupSchema.fields.displayName}
                     errors={errors.displayName}
                    />

                     {/*type === "seller" &&
                      <FormInput
                       label="Company name"
                       name="displayName"
                       type="text"
                       formOptions={signupSchema.fields.companyName}
                       errors={errors.displayName}
                      />*/}

                      <FormInput
                       label="Email"
                       name="email"
                       type="email"
                       formOptions={signupSchema.fields.email}
                       errors={errors.email}
                      />

                      <FormInput
                       label="Password"
                       name="password"
                       type="password"
                       formOptions={signupSchema.fields.password}
                       errors={errors.password}
                      />

                      <FormInput
                       label="Confirm Password"
                       name="confirm_password"
                       type="password"
                       formOptions={signupSchema.fields.confirm_password}
                       errors={errors.confirm_password}
                      />
                          
                      <SubmitButton buttonText={"Sign up"} /> 
                  </Disclosure.Panel>
                </>
              )}
            </Disclosure>
            <Disclosure open={see}>
              {({ open }) => (
                <>
                  <Disclosure.Button className="flex w-full justify-between rounded-lg bg-gray-50 px-2 py-2 text-left text-sm font-medium text-gray-800 hover:bg-purple-200 focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75">
                    <div className='w-9/12 items-center justify-between text-xs text-gray-800'>
                     <p>Merchant</p> 
                    </div>
                    <ChevronUpIcon
                      className={`ml-2 ${
                        open ? 'rotate-180 transform' : ''
                      } h-5 w-5 text-gray-800`}
                    />
                  </Disclosure.Button>
                  <Disclosure.Panel className="px-1 pt-4 pb-2 text-xs text-gray-500">
                    <FormInput
                     label="Your name"
                     name="displayName"
                     type="text"
                     formOptions={sellerSignupSchema.fields.sellerCompanyName}
                     errors={errors.displayName}
                    />

                     {/*type === "seller" &&
                      <FormInput
                       label="Company name"
                       name="displayName"
                       type="text"
                       formOptions={signupSchema.fields.companyName}
                       errors={errors.displayName}
                      />*/}

                      <FormInput
                       label="Email"
                       name="email"
                       type="email"
                       formOptions={sellerSignupSchema.fields.sellerEmail}
                       errors={errors.email}
                      />

                      <FormInput
                       label="Password"
                       name="password"
                       type="password"
                       formOptions={sellerSignupSchema.fields.sellerPassword}
                       errors={errors.password}
                      />

                      <FormInput
                       label="Confirm Password"
                       name="confirm_password"
                       type="password"
                       formOptions={sellerSignupSchema.fields.sellerConfirm_password}
                       errors={errors.confirm_password}
                      />
                          
                      <SubmitButton buttonText={"Sign up"} /> 
                  </Disclosure.Panel>
                </>
              )}
            </Disclosure>
            </div>
          </form>
         </FormProvider>
        </div>
       </div>
       <div className=" w-full border-l-0 border-t-2 border-amazon_blue md:h-full md:border-t-0 md:border-l-2 md:border-amazon_blue">
        <div className="sign-up-form text-center container md:h-full px-2 pt-8 pb-10 mx-auto sm:w-96 mb-10">
         <div className="relative w-full md:my-20 pt-8 pb-8 items-center justify-center align-middle"> 
          <p className="text-amazon_blue text-lg">
            Sign in
          </p> 
          <p className="mt-2 text-sm text-center text-amazon_blue-light hover:text-blue-900 cursor-pointer"
              onClick={() => router.push(LOGIN)}   
          >
            Already have an account? Click here to Sign in.
          </p>
         </div>
         
        </div>
       </div>
      </main>
     </div> 
  )
}

export default Signup






